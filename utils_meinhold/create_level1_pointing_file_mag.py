# This generates adjusted level1 pointing  file
# first function read dataimport numpy as np
# use develco mag pointing with the fit to longitude (Not UT)
import pylab
import numpy 
import pyfits
import os
import sys
import cPickle
import cofe_util as util
import numpy as np
wd='/cofe/flight_data/Level1/1.2/'
wds='/cofe/flight_data/Level1/1.1/'

chans=[1,3,5,9,11,13]
s15=pyfits.open(wds+'all_15GHz_servo.fits')
us15=s15['time'].data['ut']
lon=s15[5].data['HYBRIDLONGITUDE']
lonf=lon[np.abs(lon+1.875) < .1]
us15f=us15[np.abs(lon+1.875) < .1]
lon=np.interp(us15,us15f,lonf)


azf15=pyfits.open(wd+'magaz15.fits')
gaz=azf15['15GHZ'].data['AZ']
ut=azf15['15GHZ'].data['UT']

#Load the old fit parameters and crossing data inputs
f=open(wd+'fitparams_moonfixed_15_mag.pkl')
fitdic=cPickle.load(f)
f.close()
f=open(wd+'eltarget_15_mag.pkl')
eltargetdic=cPickle.load(f)
f.close()

#create a blank list to store the column 
nsamps=len(gaz)
elzero=np.zeros(nsamps,dtype=np.float32)
cols=[]
for i,c in enumerate(chans):
    corrected_az=np.mod(gaz*util.rtd+fitdic[c][0]+fitdic[c][1]*lon,360.)
    #corrected_az[corrected_az>360.]=corrected_az[corrected_az>360.]-360.
    cols.append(pyfits.Column(name='az'+str(c),format='Float32',array=corrected_az))
    cols.append(pyfits.Column(name='el'+str(c),format='Float32',array=elzero+eltargetdic[c][2]))
cols.append(pyfits.Column(name='ut',format='Float32',array=ut))
coldefinitions=pyfits.ColDefs(cols)
tablehdu=pyfits.new_table(coldefinitions)
tablehdu.writeto(wd+'all_15ghz_pointing_mag.fits',clobber=True)


#Now do 10 GHz
chans=[1,3,5]
azf10=pyfits.open(wd+'magaz10.fits')
gaz=azf10['10GHZ'].data['AZ']
ut=azf10['10GHZ'].data['UT']

s10=pyfits.open(wds+'all_10GHz_servo.fits')
us10=s10['time'].data['ut']
lon=s10[5].data['HYBRIDLONGITUDE']
lonf=lon[np.abs(lon+1.875) < .1]
us10f=us10[np.abs(lon+1.875) < .1]
lon=np.interp(us10,us10f,lonf)

f=open(wd+'fitparams_moonfixed_10_mag.pkl')
fitdic=cPickle.load(f)
f.close()
f=open(wd+'eltarget_10_mag.pkl')
eltargetdic=cPickle.load(f)
f.close()

#create a blank list to store the column 
nsamps=len(gaz)
elzero=np.zeros(nsamps,dtype=np.float32)
cols=[]
for i,c in enumerate(chans):
    corrected_az=np.mod(gaz*util.rtd+fitdic[c][0]+fitdic[c][1]*lon,360.)
    #corrected_az[corrected_az>360.]=corrected_az[corrected_az>360.]-360.
    cols.append(pyfits.Column(name='az'+str(c),format='Float32',array=corrected_az))
    cols.append(pyfits.Column(name='el'+str(c),format='Float32',array=elzero+eltargetdic[c][2]))
coldefinitions=pyfits.ColDefs(cols)
tablehdu=pyfits.new_table(coldefinitions)
tablehdu.writeto(wd+'all_10ghz_pointing_mag.fits',clobber=True)




























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































